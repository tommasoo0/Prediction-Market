# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "payment_txn"}], "name": "fund_contract", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "create_asset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "seed"}, {"type": "asset", "name": "yes_asset"}, {"type": "asset", "name": "no_asset"}], "name": "create_market", "returns": {"type": "uint64"}, "desc": "Inizializza il mercato di previsione con gli asset specificati.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "order_type"}, {"type": "account", "name": "user"}, {"type": "uint64", "name": "price"}, {"type": "uint64", "name": "quantity"}, {"type": "pay", "name": "payment_txn"}], "name": "set_order", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "order_type"}, {"type": "account", "name": "user"}], "name": "get_order", "returns": {"type": "(uint64,uint64)"}, "desc": "Recupera un ordine di acquisto dalla BoxMap.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "yes_user"}, {"type": "account", "name": "no_user"}], "name": "fill_order", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [], "name": "gas", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}, {"type": "uint64", "name": "asset_type"}, {"type": "uint64", "name": "quantity"}, {"type": "pay", "name": "payment_txn"}], "name": "buyAsset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "axfer", "name": "swap_xfer"}, {"type": "asset", "name": "yes_asset"}, {"type": "asset", "name": "no_asset"}], "name": "swap", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "order_type"}, {"type": "account", "name": "user1"}], "name": "clear_orders", "returns": {"type": "void"}, "desc": "Elimina gli ordini di un determinato tipo per tre utenti specifici.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "oracle"}, {"type": "uint64", "name": "outcome"}], "name": "close_market", "returns": {"type": "void"}, "desc": "Chiude il mercato e stabilisce il risultato.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "account", "name": "user"}, {"type": "axfer", "name": "asset_txn"}], "name": "redeem", "returns": {"type": "void"}, "desc": "Permette agli utenti di riscattare Algo in base al risultato.", "events": [], "readonly": false, "recommendations": {}}], "name": "PredictionMarket", "state": {"keys": {"box": {}, "global": {"asset_yes": {"key": "YXNzZXRfeWVz", "keyType": "AVMString", "valueType": "AVMUint64"}, "asset_no": {"key": "YXNzZXRfbm8=", "keyType": "AVMString", "valueType": "AVMUint64"}, "pool_token": {"key": "cG9vbF90b2tlbg==", "keyType": "AVMString", "valueType": "AVMUint64"}, "ratio": {"key": "cmF0aW8=", "keyType": "AVMString", "valueType": "AVMUint64"}, "matched_yes_price": {"key": "bWF0Y2hlZF95ZXNfcHJpY2U=", "keyType": "AVMString", "valueType": "AVMUint64"}, "matched_no_price": {"key": "bWF0Y2hlZF9ub19wcmljZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "winning_asset": {"key": "d2lubmluZ19hc3NldA==", "keyType": "AVMString", "valueType": "AVMUint64"}, "market_closed": {"key": "bWFya2V0X2Nsb3NlZA==", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"place_order_yes_price": {"keyType": "AVMBytes", "valueType": "AVMUint64", "prefix": "eWVzX3ByaWNlXw=="}, "place_order_yes_quantity": {"keyType": "AVMBytes", "valueType": "AVMUint64", "prefix": "eWVzX3F1YW50aXR5Xw=="}, "place_order_no_price": {"keyType": "AVMBytes", "valueType": "AVMUint64", "prefix": "bm9fcHJpY2Vf"}, "place_order_no_quantity": {"keyType": "AVMBytes", "valueType": "AVMUint64", "prefix": "bm9fcXVhbnRpdHlf"}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 0, "ints": 8}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiAFAAEDBKCNBiYNCWFzc2V0X3llcwhhc3NldF9ubwpwb29sX3Rva2VuEW1hdGNoZWRfeWVzX3ByaWNlEG1hdGNoZWRfbm9fcHJpY2UNbWFya2V0X2Nsb3NlZAp5ZXNfcHJpY2VfDXllc19xdWFudGl0eV8Jbm9fcHJpY2VfDG5vX3F1YW50aXR5Xw13aW5uaW5nX2Fzc2V0BXJhdGlvBBUffHUxGEAAGCgiZykiZyoiZycLImcrImcnBCJnJwUiZzEbQQGeggwEltrKDQRgzahzBK32u7YEPoWtpgQMS15zBJtypH0EMXLKnQSFoOY6BEqI4FUEKzfFxwQZOTKGBGdZCqY2GgCODAEtASEA+QDRALEAmQCQAGwASgA0AB4AAiJDMRkURDEYRDYaARfAHDEWIwlJOBAlEkSIBIojQzEZFEQxGEQ2GgEXwBw2GgIXiARFI0MxGRREMRhENhoBFzYaAhfAHIgEAyNDMRkURDEYRDEWIwlJOBAlEkQ2GgEXwDA2GgIXwDCIA24jQzEZFEQxGEQ2GgEXwBw2GgIXNhoDFzEWIwlJOBAjEkSIAugjQzEZFEQxGEQjQzEZFEQxGEQ2GgEXwBw2GgIXwByIAksjQzEZFEQxGEQ2GgEXNhoCF8AciAH9TBZMFlAnDExQsCNDMRkURDEYRDYaARc2GgIXwBw2GgMXNhoEFzEWIwlJOBAjEkSIAXwjQzEZFEQxGEQxFiMJSTgQIxJENhoBF8AwNhoCF8AwiADOFicMTFCwI0MxGRREMRhEiABRI0MxGRREMRhEMRYjCUk4ECMSRIgAJSNDMRlA/rgxGBREI0OKAwCxi/2yFIv/shKL/rIRJbIQIrIBs4mKAQCL/zgHMgoSRIv/OAiBgLUYEkSJsTIJRwOyLLIrsiqyKYAJWUVTX2Fzc2V0siaAA1lFU7IlIrIkIrIjIQSyIiSyECKyAbMotDxnsTIJRwOyLLIrsiqyKYAITk9fYXNzZXSyJoACTk+yJSKyJCKyIyEEsiIkshAisgGzKbQ8Z4mKAwEiKmVEFEQyBIECEkSL/TgHMgoSRIv9OAiB4KcSD0SL/ov/DEQoi/5nKYv/Z7EiKGVEcQNEgAREUFQtTFCAAS1QIillRHEDRFAyCkmyKrIpJLIjgYDIr6AlsiKAA2RidLIlsiYkshAisgGzKrQ8ZyIoZUQyCkwiiP7rIillRDIKTCKI/uAiKmVEiYoFAIv9i/4Li/84AIv8EkSL/zgHMgoSRIv/OAgSRIv7IxJBABMnBov8UIv9Fr8nB4v8UIv+Fr+Ji/sURCcIi/xQi/0WvycJi/xQi/4Wv4mKAgKL/iMSQQAVJwaL/1C+TBdMRCcHi/9QvkwXTESJi/4URCcIi/9QvkwXTEQnCYv/UL5MF0xEiYoCADEAMgkSRCcGi/5QSb1FAUQnCIv/UEm9RQFESwG+TBdMRCcHi/5QSb5MF0xESwO+TBdMRCcJi/9QSb5MF0xESwVLAwiBChgURCtPBmcnBE8DZyIoZUSL/kxPBIj99CIpZUSL/0xPAoj96E8DvEhMvEhMvEi8SIgBcomKBACAACIrZURBAFIiJwRlREEASiNEi/0jEkEALiIrZUQiKGVMjABEi/4Li/84AIv8EkSL/zgHMgoSRIv/OAgSRIv8iwCL/oj9jomL/RREIicEZUQiKWVMjABEQv/KIkL/s4oDAIAASSIoZUSL/hJEIillRIv/EkSL/TgSSUSL/TgAMQASRCIpZUQiKGVEi/04EY4CACsAAQCIAOGMAIgA5iIpZUyMAUSLAElLAgtMiwIICglJRDEAiwFPAoj9GYgAr4mIAMGMAIgAsiIoZUyMAURC/9OKAgCL/iMSQQAPJwaL/1C8SCcHi/9QvEiJi/4URCcIi/9QvEgnCYv/ULxIiYoCADEAi/4SRCInBWVEFESL/yMSQQANIihlRCcKTGcnBSNniSIpZUQnCkxnQv/wigIAIicFZUREIicKZUREi/84AIv+EkSL/zgUMgoSRIv/OBEiJwplRBJEi/84EoHoBwuxsgiL/rIHI7IQIrIBs4mIAAmIABALJwtMZ4kyCiIoZURwAESJMgoiKWVEcABEiQ==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 4, "patch": 3}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [1509], "errorMessage": "I token devono essere inviati al contratto"}, {"pc": [1487], "errorMessage": "Il mercato non \u00e8 ancora chiuso"}, {"pc": [1447], "errorMessage": "Il mercato \u00e8 gi\u00e0 stato chiuso"}, {"pc": [784], "errorMessage": "Il mercato \u00e8 gi\u00e0 stato creato"}, {"pc": [939, 1233], "errorMessage": "Il pagamento deve essere inviato al contratto"}, {"pc": [931, 1225], "errorMessage": "Il pagamento deve provenire dall'utente"}, {"pc": [1493], "errorMessage": "Il risultato non \u00e8 stato stabilito"}, {"pc": [1520], "errorMessage": "Il token inviato non \u00e8 quello vincente"}, {"pc": [945, 1239], "errorMessage": "L'importo pagato non \u00e8 corretto"}, {"pc": [1501], "errorMessage": "L'utente deve inviare il token"}, {"pc": [1079], "errorMessage": "NO user has no order"}, {"pc": [1196], "errorMessage": "Nessun match trovato, impossibile acquistare"}, {"pc": [294, 322, 344, 366, 400, 436, 445, 469, 501, 541, 581, 593], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [1125], "errorMessage": "Prices don't match condition"}, {"pc": [1059], "errorMessage": "Solo il contratto principale pu\u00f2 eseguire questa operazione"}, {"pc": [1440], "errorMessage": "Solo l'oracolo pu\u00f2 chiudere il mercato"}, {"pc": [1253], "errorMessage": "Tipo di asset non valido"}, {"pc": [975, 1029, 1416], "errorMessage": "Tipo di ordine non valido"}, {"pc": [1069], "errorMessage": "YES user has no order"}, {"pc": [1564, 1574], "errorMessage": "account opted into asset"}, {"pc": [1300], "errorMessage": "amount minimo non raggiunto"}, {"pc": [808], "errorMessage": "amount minimo non soddisfatto"}, {"pc": [830, 849], "errorMessage": "asset exists"}, {"pc": [1327], "errorMessage": "asset id incorretto"}, {"pc": [1294], "errorMessage": "asset no nn corretto"}, {"pc": [814], "errorMessage": "asset yes deve essere minore di asset no"}, {"pc": [1286], "errorMessage": "asset yes nn corretto"}, {"pc": [620], "errorMessage": "can only call when creating"}, {"pc": [297, 325, 347, 369, 403, 439, 448, 472, 504, 544, 584, 596], "errorMessage": "can only call when not creating"}, {"pc": [846, 903, 1150, 1265, 1290, 1312, 1342, 1471, 1571], "errorMessage": "check self.asset_no exists"}, {"pc": [827, 892, 1138, 1214, 1282, 1316, 1384, 1458, 1561], "errorMessage": "check self.asset_yes exists"}, {"pc": [1445, 1486], "errorMessage": "check self.market_closed exists"}, {"pc": [1191, 1258], "errorMessage": "check self.matched_no_price exists"}, {"pc": [1183, 1207], "errorMessage": "check self.matched_yes_price exists"}, {"pc": [1039, 1104], "errorMessage": "check self.place_order_no_price entry exists"}, {"pc": [1049, 1115], "errorMessage": "check self.place_order_no_quantity entry exists"}, {"pc": [1014, 1086], "errorMessage": "check self.place_order_yes_price entry exists"}, {"pc": [1024, 1097], "errorMessage": "check self.place_order_yes_quantity entry exists"}, {"pc": [782, 914], "errorMessage": "check self.pool_token exists"}, {"pc": [1492, 1518], "errorMessage": "check self.winning_asset exists"}, {"pc": [790], "errorMessage": "gruppo di transazioni non \u00e8 2"}, {"pc": [798], "errorMessage": "receiver non \u00e8 all'indirizzo del contratto"}, {"pc": [1356], "errorMessage": "send amount too low"}, {"pc": [1308], "errorMessage": "sender invalido"}, {"pc": [313, 379], "errorMessage": "transaction type is axfer"}, {"pc": [427, 532, 554, 606], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class FundContractArgs:
    """Dataclass for fund_contract arguments"""
    payment_txn: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "fund_contract(pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreateMarketArgs:
    """Dataclass for create_market arguments"""
    seed: algokit_utils.AppMethodCallTransactionArgument
    yes_asset: int
    no_asset: int

    @property
    def abi_method_signature(self) -> str:
        return "create_market(pay,asset,asset)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SetOrderArgs:
    """Dataclass for set_order arguments"""
    order_type: int
    user: str | bytes
    price: int
    quantity: int
    payment_txn: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "set_order(uint64,account,uint64,uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class GetOrderArgs:
    """Dataclass for get_order arguments"""
    order_type: int
    user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "get_order(uint64,account)(uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class FillOrderArgs:
    """Dataclass for fill_order arguments"""
    yes_user: str | bytes
    no_user: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "fill_order(account,account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class BuyAssetArgs:
    """Dataclass for buy_asset arguments"""
    user: str | bytes
    asset_type: int
    quantity: int
    payment_txn: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "buyAsset(account,uint64,uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class SwapArgs:
    """Dataclass for swap arguments"""
    swap_xfer: algokit_utils.AppMethodCallTransactionArgument
    yes_asset: int
    no_asset: int

    @property
    def abi_method_signature(self) -> str:
        return "swap(axfer,asset,asset)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class ClearOrdersArgs:
    """Dataclass for clear_orders arguments"""
    order_type: int
    user1: str | bytes

    @property
    def abi_method_signature(self) -> str:
        return "clear_orders(uint64,account)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CloseMarketArgs:
    """Dataclass for close_market arguments"""
    oracle: str | bytes
    outcome: int

    @property
    def abi_method_signature(self) -> str:
        return "close_market(account,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class RedeemArgs:
    """Dataclass for redeem arguments"""
    user: str | bytes
    asset_txn: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "redeem(account,axfer)void"


class PredictionMarketParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def fund_contract(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | FundContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund_contract(pay)void",
            "args": method_args,
        }))

    def create_asset(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_asset()void",
        }))

    def create_market(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_market(pay,asset,asset)uint64",
            "args": method_args,
        }))

    def set_order(
        self,
        args: tuple[int, str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | SetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_order(uint64,account,uint64,uint64,pay)void",
            "args": method_args,
        }))

    def get_order(
        self,
        args: tuple[int, str | bytes] | GetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_order(uint64,account)(uint64,uint64)",
            "args": method_args,
        }))

    def fill_order(
        self,
        args: tuple[str | bytes, str | bytes] | FillOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fill_order(account,account)void",
            "args": method_args,
        }))

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }))

    def buy_asset(
        self,
        args: tuple[str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | BuyAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buyAsset(account,uint64,uint64,pay)void",
            "args": method_args,
        }))

    def swap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | SwapArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap(axfer,asset,asset)void",
            "args": method_args,
        }))

    def clear_orders(
        self,
        args: tuple[int, str | bytes] | ClearOrdersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clear_orders(uint64,account)void",
            "args": method_args,
        }))

    def close_market(
        self,
        args: tuple[str | bytes, int] | CloseMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_market(account,uint64)void",
            "args": method_args,
        }))

    def redeem(
        self,
        args: tuple[str | bytes, algokit_utils.AppMethodCallTransactionArgument] | RedeemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem(account,axfer)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class PredictionMarketCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def fund_contract(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | FundContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund_contract(pay)void",
            "args": method_args,
        }))

    def create_asset(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_asset()void",
        }))

    def create_market(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_market(pay,asset,asset)uint64",
            "args": method_args,
        }))

    def set_order(
        self,
        args: tuple[int, str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | SetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_order(uint64,account,uint64,uint64,pay)void",
            "args": method_args,
        }))

    def get_order(
        self,
        args: tuple[int, str | bytes] | GetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_order(uint64,account)(uint64,uint64)",
            "args": method_args,
        }))

    def fill_order(
        self,
        args: tuple[str | bytes, str | bytes] | FillOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fill_order(account,account)void",
            "args": method_args,
        }))

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }))

    def buy_asset(
        self,
        args: tuple[str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | BuyAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buyAsset(account,uint64,uint64,pay)void",
            "args": method_args,
        }))

    def swap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | SwapArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap(axfer,asset,asset)void",
            "args": method_args,
        }))

    def clear_orders(
        self,
        args: tuple[int, str | bytes] | ClearOrdersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clear_orders(uint64,account)void",
            "args": method_args,
        }))

    def close_market(
        self,
        args: tuple[str | bytes, int] | CloseMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_market(account,uint64)void",
            "args": method_args,
        }))

    def redeem(
        self,
        args: tuple[str | bytes, algokit_utils.AppMethodCallTransactionArgument] | RedeemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem(account,axfer)void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class PredictionMarketSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def fund_contract(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | FundContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fund_contract(pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_asset(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_asset()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_market(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_market(pay,asset,asset)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def set_order(
        self,
        args: tuple[int, str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | SetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "set_order(uint64,account,uint64,uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def get_order(
        self,
        args: tuple[int, str | bytes] | GetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "get_order(uint64,account)(uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[int, int]], parsed_response)

    def fill_order(
        self,
        args: tuple[str | bytes, str | bytes] | FillOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "fill_order(account,account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "gas()void",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def buy_asset(
        self,
        args: tuple[str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | BuyAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "buyAsset(account,uint64,uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def swap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | SwapArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "swap(axfer,asset,asset)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_orders(
        self,
        args: tuple[int, str | bytes] | ClearOrdersArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "clear_orders(uint64,account)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def close_market(
        self,
        args: tuple[str | bytes, int] | CloseMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_market(account,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def redeem(
        self,
        args: tuple[str | bytes, algokit_utils.AppMethodCallTransactionArgument] | RedeemArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "redeem(account,axfer)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    asset_yes: int
    asset_no: int
    pool_token: int
    ratio: int
    matched_yes_price: int
    matched_no_price: int
    winning_asset: int
    market_closed: int

class PredictionMarketState:
    """Methods to access state for the current PredictionMarket app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def asset_yes(self) -> int:
        """Get the current value of the asset_yes key in global_state state"""
        value = self.app_client.state.global_state.get_value("asset_yes")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def asset_no(self) -> int:
        """Get the current value of the asset_no key in global_state state"""
        value = self.app_client.state.global_state.get_value("asset_no")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pool_token(self) -> int:
        """Get the current value of the pool_token key in global_state state"""
        value = self.app_client.state.global_state.get_value("pool_token")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def ratio(self) -> int:
        """Get the current value of the ratio key in global_state state"""
        value = self.app_client.state.global_state.get_value("ratio")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def matched_yes_price(self) -> int:
        """Get the current value of the matched_yes_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("matched_yes_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def matched_no_price(self) -> int:
        """Get the current value of the matched_no_price key in global_state state"""
        value = self.app_client.state.global_state.get_value("matched_no_price")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def winning_asset(self) -> int:
        """Get the current value of the winning_asset key in global_state state"""
        value = self.app_client.state.global_state.get_value("winning_asset")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def market_closed(self) -> int:
        """Get the current value of the market_closed key in global_state state"""
        value = self.app_client.state.global_state.get_value("market_closed")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def place_order_yes_price(self) -> "_MapState[bytes, int]":
        """Get values from the place_order_yes_price map in box state"""
        return _MapState(
            self.app_client.state.box,
            "place_order_yes_price",
            None
        )

    @property
    def place_order_yes_quantity(self) -> "_MapState[bytes, int]":
        """Get values from the place_order_yes_quantity map in box state"""
        return _MapState(
            self.app_client.state.box,
            "place_order_yes_quantity",
            None
        )

    @property
    def place_order_no_price(self) -> "_MapState[bytes, int]":
        """Get values from the place_order_no_price map in box state"""
        return _MapState(
            self.app_client.state.box,
            "place_order_no_price",
            None
        )

    @property
    def place_order_no_quantity(self) -> "_MapState[bytes, int]":
        """Get values from the place_order_no_quantity map in box state"""
        return _MapState(
            self.app_client.state.box,
            "place_order_no_quantity",
            None
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class PredictionMarketClient:
    """Client for interacting with PredictionMarket smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = PredictionMarketParams(self.app_client)
        self.create_transaction = PredictionMarketCreateTransactionParams(self.app_client)
        self.send = PredictionMarketSend(self.app_client)
        self.state = PredictionMarketState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "PredictionMarketClient":
        return PredictionMarketClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PredictionMarketClient":
        return PredictionMarketClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "PredictionMarketClient":
        return PredictionMarketClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "PredictionMarketComposer":
        return PredictionMarketComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["fund_contract(pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_asset()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_market(pay,asset,asset)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["set_order(uint64,account,uint64,uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["get_order(uint64,account)(uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["fill_order(account,account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["gas()void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["buyAsset(account,uint64,uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["swap(axfer,asset,asset)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["clear_orders(uint64,account)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close_market(account,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["redeem(account,axfer)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int | tuple[int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class PredictionMarketBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating PredictionMarket contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class PredictionMarketFactory(algokit_utils.TypedAppFactoryProtocol[PredictionMarketBareCallCreateParams, None, None]):
    """Factory for deploying and managing PredictionMarketClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = PredictionMarketFactoryParams(self.app_factory)
        self.create_transaction = PredictionMarketFactoryCreateTransaction(self.app_factory)
        self.send = PredictionMarketFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: PredictionMarketBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[PredictionMarketClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return PredictionMarketClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PredictionMarketClient:
        """Get an app client by creator address and name"""
        return PredictionMarketClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> PredictionMarketClient:
        """Get an app client by app ID"""
        return PredictionMarketClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class PredictionMarketFactoryParams:
    """Parameters for creating transactions for PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PredictionMarketFactoryCreateParams(app_factory)
        self.update = PredictionMarketFactoryUpdateParams(app_factory)
        self.delete = PredictionMarketFactoryDeleteParams(app_factory)

class PredictionMarketFactoryCreateParams:
    """Parameters for 'create' operations of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def fund_contract(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | FundContractArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the fund_contract(pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "fund_contract(pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_asset(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_asset()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_asset()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def create_market(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreateMarketArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_market(pay,asset,asset)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_market(pay,asset,asset)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def set_order(
        self,
        args: tuple[int, str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | SetOrderArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the set_order(uint64,account,uint64,uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "set_order(uint64,account,uint64,uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def get_order(
        self,
        args: tuple[int, str | bytes] | GetOrderArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the get_order(uint64,account)(uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "get_order(uint64,account)(uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def fill_order(
        self,
        args: tuple[str | bytes, str | bytes] | FillOrderArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the fill_order(account,account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "fill_order(account,account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def gas(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the gas()void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "gas()void",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def buy_asset(
        self,
        args: tuple[str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | BuyAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the buyAsset(account,uint64,uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "buyAsset(account,uint64,uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def swap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | SwapArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the swap(axfer,asset,asset)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "swap(axfer,asset,asset)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def clear_orders(
        self,
        args: tuple[int, str | bytes] | ClearOrdersArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the clear_orders(uint64,account)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "clear_orders(uint64,account)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def close_market(
        self,
        args: tuple[str | bytes, int] | CloseMarketArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close_market(account,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close_market(account,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def redeem(
        self,
        args: tuple[str | bytes, algokit_utils.AppMethodCallTransactionArgument] | RedeemArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the redeem(account,axfer)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "redeem(account,axfer)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class PredictionMarketFactoryUpdateParams:
    """Parameters for 'update' operations of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class PredictionMarketFactoryDeleteParams:
    """Parameters for 'delete' operations of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class PredictionMarketFactoryCreateTransaction:
    """Create transactions for PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PredictionMarketFactoryCreateTransactionCreate(app_factory)


class PredictionMarketFactoryCreateTransactionCreate:
    """Create new instances of PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class PredictionMarketFactorySend:
    """Send calls to PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = PredictionMarketFactorySendCreate(app_factory)


class PredictionMarketFactorySendCreate:
    """Send create calls to PredictionMarket contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[PredictionMarketClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return PredictionMarketClient(result[0]), result[1]


class PredictionMarketComposer:
    """Composer for creating transaction groups for PredictionMarket contract calls"""

    def __init__(self, client: "PredictionMarketClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def fund_contract(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument] | FundContractArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.fund_contract(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "fund_contract(pay)void", v
            )
        )
        return self

    def create_asset(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_asset(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_asset()void", v
            )
        )
        return self

    def create_market(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreateMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_market(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_market(pay,asset,asset)uint64", v
            )
        )
        return self

    def set_order(
        self,
        args: tuple[int, str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | SetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.set_order(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "set_order(uint64,account,uint64,uint64,pay)void", v
            )
        )
        return self

    def get_order(
        self,
        args: tuple[int, str | bytes] | GetOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.get_order(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "get_order(uint64,account)(uint64,uint64)", v
            )
        )
        return self

    def fill_order(
        self,
        args: tuple[str | bytes, str | bytes] | FillOrderArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.fill_order(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "fill_order(account,account)void", v
            )
        )
        return self

    def gas(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.gas(
                
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "gas()void", v
            )
        )
        return self

    def buy_asset(
        self,
        args: tuple[str | bytes, int, int, algokit_utils.AppMethodCallTransactionArgument] | BuyAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.buy_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "buyAsset(account,uint64,uint64,pay)void", v
            )
        )
        return self

    def swap(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | SwapArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.swap(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "swap(axfer,asset,asset)void", v
            )
        )
        return self

    def clear_orders(
        self,
        args: tuple[int, str | bytes] | ClearOrdersArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.clear_orders(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "clear_orders(uint64,account)void", v
            )
        )
        return self

    def close_market(
        self,
        args: tuple[str | bytes, int] | CloseMarketArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.close_market(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "close_market(account,uint64)void", v
            )
        )
        return self

    def redeem(
        self,
        args: tuple[str | bytes, algokit_utils.AppMethodCallTransactionArgument] | RedeemArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_app_call_method_call(
            self.client.params.redeem(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "redeem(account,axfer)void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "PredictionMarketComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "PredictionMarketComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
