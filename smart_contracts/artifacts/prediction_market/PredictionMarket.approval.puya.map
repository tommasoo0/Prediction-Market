{
  "version": 3,
  "sources": [
    "../../prediction_market/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAwDK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAJA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAjBL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBK;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AARL;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAQK;;;AAAA;;AAAL;;;AAIQ;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;AAAe;;AAAf;;AAER;;;AAEe;;AAAA;;AAAwB;;AAAxB;AAAP;AACO;;AAAA;;AAAsB;;;;AAAtB;AAAP;;AAKkB;AAMN;;AACA;;;;;;;;;;AAFG;;;;;;;;;;;AADD;;;;;;;AADK;;;AADN;;;AADH;;;AADQ;;;AAAA;;;AAAA;AAWlB;;;AAAA;AAGiB;AAML;;AACA;;;;;;;;;;AAFG;;;;;;;;;;AADD;;;;;;AADK;;;AADN;;;AADH;;;AADO;;;AAAA;;;AAAA;AAWjB;;;AAAA;;AAIO;AAAA;AAAA;AAAA;AAAP;AAIO;AAAA;AAAA;AAAA;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 100000 3"
    },
    "9": {
      "op": "bytecblock 0x151f7c75 \"yes_asset_id\" \"no_asset_id\""
    },
    "41": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "43": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "46": {
      "op": "pushbytess 0x372c7930 0x96daca0d 0x60cda873 0xaa90d17b 0xb5ff9514 // method \"create_market(uint64,string,string)void\", method \"fund_contract(pay)void\", method \"create_asset()void\", method \"get_yes_asset_id()uint64\", method \"get_no_asset_id()uint64\"",
      "defined_out": [
        "Method(create_asset()void)",
        "Method(create_market(uint64,string,string)void)",
        "Method(fund_contract(pay)void)",
        "Method(get_no_asset_id()uint64)",
        "Method(get_yes_asset_id()uint64)"
      ],
      "stack_out": [
        "Method(create_market(uint64,string,string)void)",
        "Method(fund_contract(pay)void)",
        "Method(create_asset()void)",
        "Method(get_yes_asset_id()uint64)",
        "Method(get_no_asset_id()uint64)"
      ]
    },
    "73": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_asset()void)",
        "Method(create_market(uint64,string,string)void)",
        "Method(fund_contract(pay)void)",
        "Method(get_no_asset_id()uint64)",
        "Method(get_yes_asset_id()uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_market(uint64,string,string)void)",
        "Method(fund_contract(pay)void)",
        "Method(create_asset()void)",
        "Method(get_yes_asset_id()uint64)",
        "Method(get_no_asset_id()uint64)",
        "tmp%2#0"
      ]
    },
    "76": {
      "op": "match main_create_market_route@3 main_fund_contract_route@4 main_create_asset_route@5 main_get_yes_asset_id_route@6 main_get_no_asset_id_route@7",
      "stack_out": []
    },
    "88": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "89": {
      "op": "return",
      "stack_out": []
    },
    "90": {
      "block": "main_get_no_asset_id_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "92": {
      "op": "!",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "93": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "94": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "96": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "97": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.get_no_asset_id",
      "op": "callsub get_no_asset_id",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "100": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "101": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "103": {
      "op": "concat",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "104": {
      "op": "log",
      "stack_out": []
    },
    "105": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "106": {
      "op": "return",
      "stack_out": []
    },
    "107": {
      "block": "main_get_yes_asset_id_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "109": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "110": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "111": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "113": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "114": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.get_yes_asset_id",
      "op": "callsub get_yes_asset_id",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "117": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "118": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "119": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "120": {
      "op": "concat",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "121": {
      "op": "log",
      "stack_out": []
    },
    "122": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "123": {
      "op": "return",
      "stack_out": []
    },
    "124": {
      "block": "main_create_asset_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "126": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "127": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "130": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "131": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.create_asset",
      "op": "callsub create_asset"
    },
    "134": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_fund_contract_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "143": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "145": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "1"
      ]
    },
    "146": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "147": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "148": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "150": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "151": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "152": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "153": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.fund_contract",
      "op": "callsub fund_contract",
      "stack_out": []
    },
    "156": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "157": {
      "op": "return",
      "stack_out": []
    },
    "158": {
      "block": "main_create_market_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "160": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "161": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "162": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "165": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "166": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "169": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "170": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "173": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "176": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "179": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%11#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "182": {
      "callsub": "smart_contracts.prediction_market.contract.PredictionMarket.create_market",
      "op": "callsub create_market",
      "stack_out": []
    },
    "185": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "186": {
      "op": "return",
      "stack_out": []
    },
    "187": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.create_market",
      "params": {
        "market_id#0": "uint64",
        "question#0": "bytes",
        "description#0": "bytes"
      },
      "block": "create_market",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "190": {
      "op": "pushbytes \"market_id\"",
      "defined_out": [
        "\"market_id\""
      ],
      "stack_out": [
        "\"market_id\""
      ]
    },
    "201": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"market_id\"",
        "market_id#0 (copy)"
      ],
      "stack_out": [
        "\"market_id\"",
        "market_id#0 (copy)"
      ]
    },
    "203": {
      "op": "app_global_put",
      "stack_out": []
    },
    "204": {
      "op": "pushbytes \"question\"",
      "defined_out": [
        "\"question\""
      ],
      "stack_out": [
        "\"question\""
      ]
    },
    "214": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"question\"",
        "question#0 (copy)"
      ],
      "stack_out": [
        "\"question\"",
        "question#0 (copy)"
      ]
    },
    "216": {
      "op": "app_global_put",
      "stack_out": []
    },
    "217": {
      "op": "pushbytes \"description\"",
      "defined_out": [
        "\"description\""
      ],
      "stack_out": [
        "\"description\""
      ]
    },
    "230": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"description\"",
        "description#0 (copy)"
      ],
      "stack_out": [
        "\"description\"",
        "description#0 (copy)"
      ]
    },
    "232": {
      "op": "app_global_put",
      "stack_out": []
    },
    "233": {
      "op": "pushbytes \"creator\"",
      "defined_out": [
        "\"creator\""
      ],
      "stack_out": [
        "\"creator\""
      ]
    },
    "242": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ]
    },
    "244": {
      "op": "app_global_put",
      "stack_out": []
    },
    "245": {
      "retsub": true,
      "op": "retsub"
    },
    "246": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.fund_contract",
      "params": {
        "payment_txn#0": "uint64"
      },
      "block": "fund_contract",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "249": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_txn#0 (copy)"
      ],
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "251": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "253": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "255": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "256": {
      "op": "assert",
      "stack_out": []
    },
    "257": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment_txn#0 (copy)"
      ]
    },
    "259": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "261": {
      "op": "pushint 400000 // 400000",
      "defined_out": [
        "400000",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "400000"
      ]
    },
    "265": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "266": {
      "op": "assert",
      "stack_out": []
    },
    "267": {
      "retsub": true,
      "op": "retsub"
    },
    "268": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.create_asset",
      "params": {},
      "block": "create_asset",
      "stack_in": [],
      "op": "itxn_begin"
    },
    "269": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "271": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "273": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "275": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%0%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "277": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%0%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "279": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "281": {
      "op": "pushbytes \"buy YES\"",
      "defined_out": [
        "\"buy YES\""
      ],
      "stack_out": [
        "\"buy YES\""
      ]
    },
    "290": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "292": {
      "op": "pushbytes \"YES\"",
      "defined_out": [
        "\"YES\""
      ],
      "stack_out": [
        "\"YES\""
      ]
    },
    "297": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "299": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "300": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "302": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "303": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "305": {
      "op": "intc_2 // 100000",
      "defined_out": [
        "100000"
      ],
      "stack_out": [
        "100000"
      ]
    },
    "306": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "308": {
      "op": "intc_3 // acfg",
      "defined_out": [
        "acfg"
      ],
      "stack_out": [
        "acfg"
      ]
    },
    "309": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "311": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "312": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "314": {
      "op": "itxn_submit"
    },
    "315": {
      "op": "bytec_1 // \"yes_asset_id\"",
      "defined_out": [
        "\"yes_asset_id\""
      ],
      "stack_out": [
        "\"yes_asset_id\""
      ]
    },
    "316": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"yes_asset_id\"",
        "yes_creation_tx.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"yes_asset_id\"",
        "yes_creation_tx.CreatedAssetID#0"
      ]
    },
    "318": {
      "op": "app_global_put",
      "stack_out": []
    },
    "319": {
      "op": "itxn_begin"
    },
    "320": {
      "op": "global CreatorAddress",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "322": {
      "op": "dupn 3",
      "defined_out": [
        "inner_txn_params%1%%param_ConfigAssetClawback_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetClawback_idx_0#0"
      ]
    },
    "324": {
      "op": "itxn_field ConfigAssetClawback",
      "stack_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetFreeze_idx_0#0"
      ]
    },
    "326": {
      "op": "itxn_field ConfigAssetFreeze",
      "stack_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0",
        "inner_txn_params%1%%param_ConfigAssetReserve_idx_0#0"
      ]
    },
    "328": {
      "op": "itxn_field ConfigAssetReserve",
      "stack_out": [
        "inner_txn_params%1%%param_ConfigAssetManager_idx_0#0"
      ]
    },
    "330": {
      "op": "itxn_field ConfigAssetManager",
      "stack_out": []
    },
    "332": {
      "op": "pushbytes \"buy NO\"",
      "defined_out": [
        "\"buy NO\""
      ],
      "stack_out": [
        "\"buy NO\""
      ]
    },
    "340": {
      "op": "itxn_field ConfigAssetName",
      "stack_out": []
    },
    "342": {
      "op": "pushbytes \"NO\"",
      "defined_out": [
        "\"NO\""
      ],
      "stack_out": [
        "\"NO\""
      ]
    },
    "346": {
      "op": "itxn_field ConfigAssetUnitName",
      "stack_out": []
    },
    "348": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "349": {
      "op": "itxn_field ConfigAssetDefaultFrozen",
      "stack_out": []
    },
    "351": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "352": {
      "op": "itxn_field ConfigAssetDecimals",
      "stack_out": []
    },
    "354": {
      "op": "intc_2 // 100000",
      "stack_out": [
        "100000"
      ]
    },
    "355": {
      "op": "itxn_field ConfigAssetTotal",
      "stack_out": []
    },
    "357": {
      "op": "intc_3 // acfg",
      "stack_out": [
        "acfg"
      ]
    },
    "358": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "360": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "361": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "363": {
      "op": "itxn_submit"
    },
    "364": {
      "op": "bytec_2 // \"no_asset_id\"",
      "defined_out": [
        "\"no_asset_id\""
      ],
      "stack_out": [
        "\"no_asset_id\""
      ]
    },
    "365": {
      "op": "itxn CreatedAssetID",
      "defined_out": [
        "\"no_asset_id\"",
        "no_creation_tx.CreatedAssetID#0"
      ],
      "stack_out": [
        "\"no_asset_id\"",
        "no_creation_tx.CreatedAssetID#0"
      ]
    },
    "367": {
      "op": "app_global_put",
      "stack_out": []
    },
    "368": {
      "retsub": true,
      "op": "retsub"
    },
    "369": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.get_yes_asset_id",
      "params": {},
      "block": "get_yes_asset_id",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "370": {
      "op": "bytec_1 // \"yes_asset_id\"",
      "defined_out": [
        "\"yes_asset_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"yes_asset_id\""
      ]
    },
    "371": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "372": {
      "error": "check self.yes_asset_id exists",
      "op": "assert // check self.yes_asset_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "373": {
      "retsub": true,
      "op": "retsub"
    },
    "374": {
      "subroutine": "smart_contracts.prediction_market.contract.PredictionMarket.get_no_asset_id",
      "params": {},
      "block": "get_no_asset_id",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "375": {
      "op": "bytec_2 // \"no_asset_id\"",
      "defined_out": [
        "\"no_asset_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"no_asset_id\""
      ]
    },
    "376": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "377": {
      "error": "check self.no_asset_id exists",
      "op": "assert // check self.no_asset_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "378": {
      "retsub": true,
      "op": "retsub"
    }
  }
}