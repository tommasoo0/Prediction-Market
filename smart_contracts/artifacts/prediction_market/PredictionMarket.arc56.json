{
    "name": "PredictionMarket",
    "structs": {},
    "methods": [
        {
            "name": "fund_contract",
            "args": [
                {
                    "type": "pay",
                    "name": "payment_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_asset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_market",
            "args": [
                {
                    "type": "pay",
                    "name": "seed"
                },
                {
                    "type": "asset",
                    "name": "yes_asset"
                },
                {
                    "type": "asset",
                    "name": "no_asset"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Inizializza il mercato di previsione con gli asset specificati.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "set_order",
            "args": [
                {
                    "type": "uint64",
                    "name": "order_type"
                },
                {
                    "type": "account",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "price"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "pay",
                    "name": "payment_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "get_order",
            "args": [
                {
                    "type": "uint64",
                    "name": "order_type"
                },
                {
                    "type": "account",
                    "name": "user"
                }
            ],
            "returns": {
                "type": "(uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Recupera un ordine di acquisto dalla BoxMap.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "fill_order",
            "args": [
                {
                    "type": "account",
                    "name": "yes_user"
                },
                {
                    "type": "account",
                    "name": "no_user"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "gas",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "buyAsset",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                },
                {
                    "type": "uint64",
                    "name": "asset_type"
                },
                {
                    "type": "uint64",
                    "name": "quantity"
                },
                {
                    "type": "pay",
                    "name": "payment_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "swap",
            "args": [
                {
                    "type": "axfer",
                    "name": "swap_xfer"
                },
                {
                    "type": "asset",
                    "name": "yes_asset"
                },
                {
                    "type": "asset",
                    "name": "no_asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "clear_orders",
            "args": [
                {
                    "type": "uint64",
                    "name": "order_type"
                },
                {
                    "type": "account",
                    "name": "user1"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Elimina gli ordini di un determinato tipo per tre utenti specifici.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_market",
            "args": [
                {
                    "type": "account",
                    "name": "oracle"
                },
                {
                    "type": "uint64",
                    "name": "outcome"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Chiude il mercato e stabilisce il risultato.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "redeem",
            "args": [
                {
                    "type": "account",
                    "name": "user"
                },
                {
                    "type": "axfer",
                    "name": "asset_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Permette agli utenti di riscattare Algo in base al risultato.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 8,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset_yes": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfeWVz"
                },
                "asset_no": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfbm8="
                },
                "pool_token": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cG9vbF90b2tlbg=="
                },
                "ratio": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmF0aW8="
                },
                "matched_yes_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF0Y2hlZF95ZXNfcHJpY2U="
                },
                "matched_no_price": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWF0Y2hlZF9ub19wcmljZQ=="
                },
                "winning_asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "d2lubmluZ19hc3NldA=="
                },
                "market_closed": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWFya2V0X2Nsb3NlZA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "place_order_yes_price": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "prefix": "eWVzX3ByaWNlXw=="
                },
                "place_order_yes_quantity": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "prefix": "eWVzX3F1YW50aXR5Xw=="
                },
                "place_order_no_price": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "prefix": "bm9fcHJpY2Vf"
                },
                "place_order_no_quantity": {
                    "keyType": "AVMBytes",
                    "valueType": "AVMUint64",
                    "prefix": "bm9fcXVhbnRpdHlf"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        1509
                    ],
                    "errorMessage": "I token devono essere inviati al contratto"
                },
                {
                    "pc": [
                        1487
                    ],
                    "errorMessage": "Il mercato non \u00e8 ancora chiuso"
                },
                {
                    "pc": [
                        1447
                    ],
                    "errorMessage": "Il mercato \u00e8 gi\u00e0 stato chiuso"
                },
                {
                    "pc": [
                        784
                    ],
                    "errorMessage": "Il mercato \u00e8 gi\u00e0 stato creato"
                },
                {
                    "pc": [
                        939,
                        1233
                    ],
                    "errorMessage": "Il pagamento deve essere inviato al contratto"
                },
                {
                    "pc": [
                        931,
                        1225
                    ],
                    "errorMessage": "Il pagamento deve provenire dall'utente"
                },
                {
                    "pc": [
                        1493
                    ],
                    "errorMessage": "Il risultato non \u00e8 stato stabilito"
                },
                {
                    "pc": [
                        1520
                    ],
                    "errorMessage": "Il token inviato non \u00e8 quello vincente"
                },
                {
                    "pc": [
                        945,
                        1239
                    ],
                    "errorMessage": "L'importo pagato non \u00e8 corretto"
                },
                {
                    "pc": [
                        1501
                    ],
                    "errorMessage": "L'utente deve inviare il token"
                },
                {
                    "pc": [
                        1079
                    ],
                    "errorMessage": "NO user has no order"
                },
                {
                    "pc": [
                        1196
                    ],
                    "errorMessage": "Nessun match trovato, impossibile acquistare"
                },
                {
                    "pc": [
                        294,
                        322,
                        344,
                        366,
                        400,
                        436,
                        445,
                        469,
                        501,
                        541,
                        581,
                        593
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1125
                    ],
                    "errorMessage": "Prices don't match condition"
                },
                {
                    "pc": [
                        1059
                    ],
                    "errorMessage": "Solo il contratto principale pu\u00f2 eseguire questa operazione"
                },
                {
                    "pc": [
                        1440
                    ],
                    "errorMessage": "Solo l'oracolo pu\u00f2 chiudere il mercato"
                },
                {
                    "pc": [
                        1253
                    ],
                    "errorMessage": "Tipo di asset non valido"
                },
                {
                    "pc": [
                        975,
                        1029,
                        1416
                    ],
                    "errorMessage": "Tipo di ordine non valido"
                },
                {
                    "pc": [
                        1069
                    ],
                    "errorMessage": "YES user has no order"
                },
                {
                    "pc": [
                        1564,
                        1574
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        1300
                    ],
                    "errorMessage": "amount minimo non raggiunto"
                },
                {
                    "pc": [
                        808
                    ],
                    "errorMessage": "amount minimo non soddisfatto"
                },
                {
                    "pc": [
                        830,
                        849
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        1327
                    ],
                    "errorMessage": "asset id incorretto"
                },
                {
                    "pc": [
                        1294
                    ],
                    "errorMessage": "asset no nn corretto"
                },
                {
                    "pc": [
                        814
                    ],
                    "errorMessage": "asset yes deve essere minore di asset no"
                },
                {
                    "pc": [
                        1286
                    ],
                    "errorMessage": "asset yes nn corretto"
                },
                {
                    "pc": [
                        620
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        297,
                        325,
                        347,
                        369,
                        403,
                        439,
                        448,
                        472,
                        504,
                        544,
                        584,
                        596
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        846,
                        903,
                        1150,
                        1265,
                        1290,
                        1312,
                        1342,
                        1471,
                        1571
                    ],
                    "errorMessage": "check self.asset_no exists"
                },
                {
                    "pc": [
                        827,
                        892,
                        1138,
                        1214,
                        1282,
                        1316,
                        1384,
                        1458,
                        1561
                    ],
                    "errorMessage": "check self.asset_yes exists"
                },
                {
                    "pc": [
                        1445,
                        1486
                    ],
                    "errorMessage": "check self.market_closed exists"
                },
                {
                    "pc": [
                        1191,
                        1258
                    ],
                    "errorMessage": "check self.matched_no_price exists"
                },
                {
                    "pc": [
                        1183,
                        1207
                    ],
                    "errorMessage": "check self.matched_yes_price exists"
                },
                {
                    "pc": [
                        1039,
                        1104
                    ],
                    "errorMessage": "check self.place_order_no_price entry exists"
                },
                {
                    "pc": [
                        1049,
                        1115
                    ],
                    "errorMessage": "check self.place_order_no_quantity entry exists"
                },
                {
                    "pc": [
                        1014,
                        1086
                    ],
                    "errorMessage": "check self.place_order_yes_price entry exists"
                },
                {
                    "pc": [
                        1024,
                        1097
                    ],
                    "errorMessage": "check self.place_order_yes_quantity entry exists"
                },
                {
                    "pc": [
                        782,
                        914
                    ],
                    "errorMessage": "check self.pool_token exists"
                },
                {
                    "pc": [
                        1492,
                        1518
                    ],
                    "errorMessage": "check self.winning_asset exists"
                },
                {
                    "pc": [
                        790
                    ],
                    "errorMessage": "gruppo di transazioni non \u00e8 2"
                },
                {
                    "pc": [
                        798
                    ],
                    "errorMessage": "receiver non \u00e8 all'indirizzo del contratto"
                },
                {
                    "pc": [
                        1356
                    ],
                    "errorMessage": "send amount too low"
                },
                {
                    "pc": [
                        1308
                    ],
                    "errorMessage": "sender invalido"
                },
                {
                    "pc": [
                        313,
                        379
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        427,
                        532,
                        554,
                        606
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 4,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}